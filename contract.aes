payable contract ArticleAmount =

  record article = 
    { publisherAddress : address,
      title            : string,
      name             : string,
      article          : string,
      caption          : string,
      appreciatedAmount: int,
      articleDate : int }

  record state = { 
    articles : map(int, article),
    totalArticles : int }

  entrypoint init() = 
    { articles = {},
    totalArticles = 0 }

  entrypoint fetchArticle(index : int) : article =
    switch(Map.lookup(index, state.articles))
      None   => abort("No Article was registered with this index number.")
      Some(x)=> x
    
  stateful entrypoint publishArticle(title' : string, name' : string, article' : string, caption' : string) =
    let article = { publisherAddress = Call.caller, title = title', name = name', article = article', caption = caption', appreciatedAmount = 0, articleDate = Chain.timestamp}
    let index = fetchtotalArticles() + 1
    put(state { articles[index] = article, totalArticles = index})
    
  entrypoint fetchtotalArticles() : int =
    state.totalArticles
    
  payable stateful entrypoint appreciateArticle(index : int) =
    
    let article = fetchArticle(index)

    require(article.publisherAddress != Call.caller, "You cannot appreciate your own article")
    Chain.spend(article.publisherAddress, Call.value)
    let updatedappreciatedAmount = article.appreciatedAmount + Call.value
    let updatedArticles = state.articles{ [index].appreciatedAmount = updatedappreciatedAmount }
    put(state{ articles = updatedArticles })